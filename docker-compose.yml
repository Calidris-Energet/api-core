services:
  api:
    env_file:
      - .env.development
    build:
      dockerfile: Dockerfile
      context: ./api
    command: bash -c "npm run seed:dev && npm run start:dev"
    environment:
      NODE_ENV: development
      PORT: 3000
    volumes:
      - ./api/src:/app/api/src
    ports:
      - "8000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    links:
      - postgres
      - minio
      - configurator
    networks:
      - energet-network

  configurator:
     build:
       dockerfile: Dockerfile
       context: ./configurator
     command: npm run dev
     ports:
       - "5000:5000"
     environment:
       NODE_ENV: development
       PORT: 5000
     volumes:
       - ./configurator/src:/app/src
     networks:
       - energet-network

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
       - postgres:/var/www/postgres/docker-volumes/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DATABASE}'"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - energet-network

  minio:
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://minio:9000/minio/health/live; }
        minio $$0 "$$@" --quiet & echo $$! > /tmp/minio.pid
        until isAlive; do sleep 1; done
        echo "MinIO is ready. Proceeding with setup..."
        mc alias set myminio http://minio:9000 minio minio123
        mc mb myminio/images/ --ignore-existing
        mc anonymous set public myminio/images
        kill -s INT $$(cat /tmp/minio.pid) && rm /tmp/minio.pid
        while isAlive; do sleep 0.1; done
        exec minio $$0 "$$@"
        '
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - minio-data:/data
    networks:
      - energet-network

#  nginx:
#    image: nginx:latest
#    container_name: nginx
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf
#      - /home/energet/energet-frontend/dist:/usr/share/nginx/html
#      - /etc/letsencrypt:/etc/letsencrypt:ro
#    depends_on:
#      api:
#        condition: service_started
#    networks:
#      - energet-network

#  telegram-notifier:
#    image: lorcas/docker-telegram-notifier:latest
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#    environment:
#      TELEGRAM_NOTIFIER_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
#      TELEGRAM_NOTIFIER_CHAT_ID: ${TELEGRAM_CHAT_ID}
#      TELEGRAM_NOTIFIER_TOPIC_ID: ${TELEGRAM_TOPIC_ID}
#    labels:
#      telegram-notifier.monitor: false

volumes:
  postgres:
  pgadmin:
  minio-data:

networks:
  energet-network:
    driver: bridge
